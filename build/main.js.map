{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Sourceanalytix extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'sourceanalytix',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\tthis.on('objectChange', this.onObjectChange.bind(this));\n\t\tthis.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if an object changes to ensure (de-) activation of calculation or update configuration settings\n\t */\n\tprivate onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t\tif (obj) {\n\t\t\t// The object was changed\n\t\t\tthis.log.debug(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t\t} else {\n\t\t\t// The object was deleted\n\t\t\tthis.log.debug(`object ${id} deleted`);\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.debug(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t/**\n\t * Handle messages from State settings and provide Unit and Price definitions\n\t */\n\tprivate onMessage(obj: ioBroker.Message): void {\n\t\tif (typeof obj === 'object' && obj.message) {\n\t\t\tif (obj.command === 'send') {\n\t\t\t\t// e.g. send email or pushover or whatever\n\t\t\t\tthis.log.debug('send command');\n\n\t\t\t\t// Send response in callback if required\n\t\t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Sourceanalytix(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Sourceanalytix())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AAKvB,MAAM,uBAAuB,MAAM,QAAQ;AAAA,EAC1C,AAAO,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM,iCACF,UADE;AAAA,MAEL,MAAM;AAAA,IACP,EAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,gBAAgB,KAAK,eAAe,KAAK,IAAI,CAAC;AACtD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA,EAKA,MAAc,UAAyB;AAAA,EAEvC;AAAA,EAKA,AAAQ,SAAS,UAA4B;AAC5C,QAAI;AACH,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAKA,AAAQ,eAAe,IAAY,KAA+C;AACjF,QAAI,KAAK;AAER,WAAK,IAAI,MAAM,UAAU,eAAe,KAAK,UAAU,GAAG,GAAG;AAAA,IAC9D,OAAO;AAEN,WAAK,IAAI,MAAM,UAAU,YAAY;AAAA,IACtC;AAAA,EACD;AAAA,EAKA,AAAQ,cAAc,IAAY,OAAgD;AACjF,QAAI,OAAO;AAEV,WAAK,IAAI,MAAM,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IACxE,OAAO;AAEN,WAAK,IAAI,MAAM,SAAS,YAAY;AAAA,IACrC;AAAA,EACD;AAAA,EAKA,AAAQ,UAAU,KAA6B;AAC9C,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AAC3C,UAAI,IAAI,YAAY,QAAQ;AAE3B,aAAK,IAAI,MAAM,cAAc;AAG7B,YAAI,IAAI;AAAU,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,oBAAoB,IAAI,QAAQ;AAAA,MACtF;AAAA,IACD;AAAA,EACD;AACD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,eAAe,OAAO;AACpG,OAAO;AAEN,EAAC,OAAM,IAAI,eAAe,GAAG;AAC9B;",
  "names": []
}
